// src/presentation/mcp/controller.mcp.ts
import { Request, Response } from 'express';
import axios from 'axios';
import { CustomError } from '../../domain/errors/custom.error';
import logger from '../../configs/logger';
import { envs } from '../../configs/envs';
import { ListToolsUseCase } from '../../domain/use-cases/mcp/list-tools.use-case';
import { CallToolUseCase } from '../../domain/use-cases/mcp/call-tool.use-case';
import { MCPCallDto } from '../../domain/dtos/mcp/mcp-call.dto';
import { MCPGuardrailsService } from '../../infrastructure/services/mcp-guardrails.service';

export class MCPController {

    // Modelos válidos de Claude (actualizados a 2024)
    private readonly VALID_CLAUDE_MODELS = [
        'claude-3-5-sonnet-20241022',
        'claude-3-5-sonnet-20240620',
        'claude-3-5-haiku-20241022',
        'claude-3-opus-20240229',
        'claude-3-sonnet-20240229',
        'claude-3-haiku-20240307'
    ];

    // Servicio de guardarriles
    private readonly guardrailsService: MCPGuardrailsService;

    constructor(
        private readonly listToolsUseCase: ListToolsUseCase,
        private readonly callToolUseCase: CallToolUseCase
    ) {
        this.guardrailsService = new MCPGuardrailsService();
        
        // Limpiar sesiones expiradas cada 5 minutos
        setInterval(() => {
            this.guardrailsService.cleanExpiredSessions();
        }, 5 * 60 * 1000);
    }

    private handleError = (error: unknown, res: Response) => {
        if (error instanceof CustomError) {
            return res.status(error.statusCode).json({ error: error.message });
        }

        logger.error('Unexpected error in MCPController:', error);
        return res.status(500).json({ error: 'Internal server error' });
    };
    // Endpoint proxy para Anthropic Claude
    public anthropicProxy = async (req: Request, res: Response) => {
        try {
            logger.info('Received request for Anthropic proxy');

            // Verificar que existe la API key
            if (!envs.ANTHROPIC_API_KEY) {
                throw CustomError.internalServerError('Anthropic API key not configured');
            }

            // Obtener el cuerpo de la petición
            const { model, max_tokens, messages, ...otherParams } = req.body;

            // Validar parámetros básicos
            if (!model || !messages) {
                throw CustomError.badRequest('Model and messages are required');
            }

            // Validar que el modelo sea válido
            if (!this.VALID_CLAUDE_MODELS.includes(model)) {
                logger.warn(`Invalid model requested: ${model}`);
                throw CustomError.badRequest(
                    `Invalid model: ${model}. Valid models are: ${this.VALID_CLAUDE_MODELS.join(', ')}`
                );
            }

            // **APLICAR GUARDARRILES**
            const sessionId = req.headers['x-session-id'] as string || 
                             req.ip || 
                             `session_${Date.now()}`;

            const guardrailValidation = this.guardrailsService.validateAndProcessRequest(
                { model, max_tokens, messages, ...otherParams },
                sessionId
            );

            // Si los guardarriles bloquean la request
            if (!guardrailValidation.allowed) {
                logger.warn(`[Guardrails] Request blocked for session ${sessionId}: ${guardrailValidation.reason}`);
                
                return res.status(400).json({
                    error: 'Request blocked by guardrails',
                    reason: guardrailValidation.reason,
                    message: guardrailValidation.suggestedResponse || 'Request not allowed',
                    suggestions: guardrailValidation.suggestedResponse
                });
            }

            // Usar la request modificada por los guardarriles
            const processedRequest = guardrailValidation.modifiedRequest || req.body;

            // Log de warnings si existen
            if (guardrailValidation.warnings && guardrailValidation.warnings.length > 0) {
                logger.warn(`[Guardrails] Warnings for session ${sessionId}:`, guardrailValidation.warnings);
            }

            // Configurar headers para Anthropic
            const headers = {
                'Content-Type': 'application/json',
                'x-api-key': envs.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
            };

            logger.info(`Making request to Anthropic API`, { 
                model: processedRequest.model, 
                messageCount: processedRequest.messages.length,
                maxTokens: processedRequest.max_tokens,
                sessionId,
                hasSystemPrompt: !!processedRequest.system
            });

            // Realizar la petición a la API de Anthropic
            const response = await axios.post(
                'https://api.anthropic.com/v1/messages',
                processedRequest,
                {
                    headers,
                    timeout: 30000 // 30 segundos timeout
                }
            );

            logger.info('Anthropic API request successful', {
                sessionId,
                responseTokens: response.data.usage?.output_tokens || 0
            });

            // **POST-PROCESO DE RESPUESTA**
            const processedResponse = this.postProcessAnthropicResponse(response.data, sessionId);

            // Devolver la respuesta procesada
            return res.status(200).json(processedResponse);

        } catch (error) {
            // Manejo específico de errores de Axios/Anthropic
            if (axios.isAxiosError(error)) {
                const status = error.response?.status || 500;
                const message = error.response?.data?.error?.message || 'Error communicating with Anthropic API';

                logger.error(`Anthropic API error (${status}):`, message);

                return res.status(status).json({
                    error: message,
                    details: error.response?.data
                });
            }

            this.handleError(error, res);
        }
    };

    /**
     * Post-procesar respuesta de Anthropic para aplicar guardarriles
     */
    private postProcessAnthropicResponse(response: any, sessionId: string): any {
        // Verificar si la respuesta intenta salirse del ámbito permitido
        if (response.content && Array.isArray(response.content)) {
            for (const content of response.content) {
                if (content.type === 'text' && content.text) {
                    // Verificar si la respuesta contiene disclaimers o intentos de salirse del ámbito
                    const text = content.text.toLowerCase();
                    const outOfScopeIndicators = [
                        'no puedo ayudar con eso',
                        'eso está fuera de mi ámbito',
                        'no estoy diseñado para',
                        'no tengo información sobre',
                        'lo siento, pero no puedo'
                    ];

                    const hasOutOfScopeContent = outOfScopeIndicators.some(indicator => 
                        text.includes(indicator)
                    );

                    if (hasOutOfScopeContent) {
                        logger.info(`[Guardrails] Response contains out-of-scope content for session ${sessionId}`);
                        // La respuesta ya es apropiada, mantenerla
                    }
                }
            }
        }

        // Agregar metadata de guardarriles
        return {
            ...response,
            _guardrails: {
                sessionId,
                processed: true,
                timestamp: new Date().toISOString()
            }
        };
    }

    // **ENDPOINTS DE GESTIÓN DE GUARDARRILES**

    // Obtener configuración de guardarriles
    public getGuardrailsConfig = async (req: Request, res: Response) => {
        try {
            const config = this.guardrailsService.getConfig();
            
            return res.status(200).json({
                status: 'OK',
                service: 'MCP Guardrails Config',
                timestamp: new Date().toISOString(),
                config: {
                    enabled: config.enabled,
                    strictMode: config.strictMode,
                    limits: config.limits,
                    allowedTools: config.allowedTools,
                    contentRules: config.contentRules
                }
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Obtener estadísticas de sesiones
    public getGuardrailsStats = async (req: Request, res: Response) => {
        try {
            const stats = this.guardrailsService.getSessionStats();
            
            return res.status(200).json({
                status: 'OK',
                service: 'MCP Guardrails Stats',
                timestamp: new Date().toISOString(),
                stats
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Reiniciar una sesión específica
    public resetSession = async (req: Request, res: Response) => {
        try {
            const { sessionId } = req.params;
            
            if (!sessionId) {
                throw CustomError.badRequest('Session ID is required');
            }

            this.guardrailsService.resetSession(sessionId);
            
            return res.status(200).json({
                status: 'OK',
                service: 'MCP Session Reset',
                timestamp: new Date().toISOString(),
                message: `Session ${sessionId} has been reset`,
                sessionId
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Limpiar todas las sesiones expiradas
    public cleanExpiredSessions = async (req: Request, res: Response) => {
        try {
            this.guardrailsService.cleanExpiredSessions();
            
            return res.status(200).json({
                status: 'OK',
                service: 'MCP Sessions Cleanup',
                timestamp: new Date().toISOString(),
                message: 'Expired sessions cleaned successfully'
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

        } catch (error) {
            // Manejo específico de errores de Axios/Anthropic
            if (axios.isAxiosError(error)) {
                const status = error.response?.status || 500;
                const message = error.response?.data?.error?.message || 'Error communicating with Anthropic API';

                logger.error(`Anthropic API error (${status}):`, message);

                return res.status(status).json({
                    error: message,
                    details: error.response?.data
                });
            }

            this.handleError(error, res);
        }
    };

    /**
     * Post-procesar respuesta de Anthropic para aplicar guardarriles
     */
    private postProcessAnthropicResponse(response: any, sessionId: string): any {
        // Verificar si la respuesta intenta salirse del ámbito permitido
        if (response.content && Array.isArray(response.content)) {
            for (const content of response.content) {
                if (content.type === 'text' && content.text) {
                    // Verificar si la respuesta contiene disclaimers o intentos de salirse del ámbito
                    const text = content.text.toLowerCase();
                    const outOfScopeIndicators = [
                        'no puedo ayudar con eso',
                        'eso está fuera de mi ámbito',
                        'no estoy diseñado para',
                        'no tengo información sobre',
                        'lo siento, pero no puedo'
                    ];

                    const hasOutOfScopeContent = outOfScopeIndicators.some(indicator => 
                        text.includes(indicator)
                    );

                    if (hasOutOfScopeContent) {
                        logger.info(`[Guardrails] Response contains out-of-scope content for session ${sessionId}`);
                        // La respuesta ya es apropiada, mantenerla
                    }
                }
            }
        }

        // Agregar metadata de guardarriles
        return {
            ...response,
            _guardrails: {
                sessionId,
                processed: true,
                timestamp: new Date().toISOString()
            }
        };
    }

    // Endpoint para listar herramientas MCP disponibles
    public listTools = async (req: Request, res: Response) => {
        try {
            logger.info('List MCP tools requested');

            const tools = await this.listToolsUseCase.execute();

            return res.status(200).json({
                status: 'OK',
                service: 'MCP Tools',
                timestamp: new Date().toISOString(),
                tools: tools.map(tool => ({
                    name: tool.name,
                    description: tool.description,
                    inputSchema: tool.inputSchema
                }))
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Endpoint para llamar una herramienta MCP específica
    public callTool = async (req: Request, res: Response) => {
        try {
            const { toolName, args } = req.body;

            if (!toolName) {
                throw CustomError.badRequest('Tool name is required');
            }

            logger.info(`Calling MCP tool: ${toolName}`, { args });

            // Crear el DTO usando el formato correcto
            const [error, mcpCallDto] = MCPCallDto.create({
                toolName,
                arguments: args || {}
            });

            if (error) {
                throw CustomError.badRequest(error);
            }

            const result = await this.callToolUseCase.execute(mcpCallDto!);

            return res.status(200).json({
                status: 'OK',
                service: 'MCP Tool Call',
                timestamp: new Date().toISOString(),
                toolName,
                result
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Endpoint simple para obtener información de herramientas disponibles
    public getToolsInfo = async (req: Request, res: Response) => {
        try {
            logger.info('Tools info requested');

            return res.status(200).json({
                status: 'OK',
                service: 'MCP Tools Info',
                timestamp: new Date().toISOString(),
                availableTools: [
                    {
                        name: "get_products",
                        description: "Obtiene lista de productos con filtros opcionales",
                        directEndpoint: "GET /api/products",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            page: "número de página (default: 1)",
                            limit: "productos por página (default: 10)",
                            search: "término de búsqueda",
                            categoryId: "ID de categoría",
                            minPrice: "precio mínimo",
                            maxPrice: "precio máximo"
                        },
                        examples: {
                            directCall: "GET /api/products?page=1&limit=10",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "get_products",
                                    args: { page: 1, limit: 10, search: "laptop" }
                                }
                            }
                        }
                    },
                    {
                        name: "search_products",
                        description: "Busca productos por nombre, descripción o categoría",
                        directEndpoint: "GET /api/products/search",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            q: "término de búsqueda (requerido)",
                            page: "número de página (default: 1)",
                            limit: "productos por página (default: 10)",
                            categories: "categorías separadas por coma",
                            minPrice: "precio mínimo",
                            maxPrice: "precio máximo",
                            sortBy: "campo de ordenamiento",
                            sortOrder: "asc o desc"
                        },
                        examples: {
                            directCall: "GET /api/products/search?q=lomito&page=1&limit=5",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "search_products",
                                    args: { q: "lomito", page: 1, limit: 5 }
                                }
                            }
                        }
                    },
                    {
                        name: "get_product_by_id",
                        description: "Obtiene un producto específico por ID",
                        directEndpoint: "GET /api/products/{id}",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            id: "ID del producto (requerido)"
                        },
                        examples: {
                            directCall: "GET /api/products/60f8b4b8e0b2a3a4b8b4b8b4",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "get_product_by_id",
                                    args: { id: "60f8b4b8e0b2a3a4b8b4b8b4" }
                                }
                            }
                        }
                    },
                    {
                        name: "get_customers",
                        description: "Obtiene lista de clientes (requiere autenticación admin)",
                        directEndpoint: "GET /api/admin/customers",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            page: "número de página (default: 1)",
                            limit: "clientes por página (default: 10)"
                        },
                        examples: {
                            directCall: "GET /api/admin/customers?page=1&limit=10",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "get_customers",
                                    args: { page: 1, limit: 10 }
                                }
                            }
                        }
                    },
                    {
                        name: "search_customers",
                        description: "Busca clientes por nombre, email o teléfono",
                        directEndpoint: "GET /api/customers/search",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            q: "término de búsqueda (nombre, email, teléfono)",
                            neighborhoodId: "ID del barrio para filtrar",
                            page: "número de página (default: 1)",
                            limit: "clientes por página (default: 10)",
                            sortBy: "campo de ordenamiento",
                            sortOrder: "asc o desc"
                        },
                        examples: {
                            directCall: "GET /api/customers/search?q=juan&page=1&limit=5",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "search_customers",
                                    args: { q: "juan", page: 1, limit: 5 }
                                }
                            }
                        }
                    },
                    {
                        name: "get_orders",
                        description: "Obtiene lista de pedidos (requiere autenticación admin)",
                        directEndpoint: "GET /api/v1/admin/orders",
                        mcpEndpoint: "POST /api/mcp/tools/call",
                        parameters: {
                            page: "número de página (default: 1)",
                            limit: "pedidos por página (default: 10)",
                            customerId: "ID del cliente para filtrar",
                            status: "estado del pedido",
                            dateFrom: "fecha desde (YYYY-MM-DD)",
                            dateTo: "fecha hasta (YYYY-MM-DD)"
                        },
                        examples: {
                            directCall: "GET /api/v1/admin/orders?page=1&limit=10&customerId=60f8b4b8e0b2a3a4b8b4b8b4",
                            mcpCall: {
                                method: "POST",
                                url: "/api/mcp/tools/call",
                                body: {
                                    toolName: "get_orders",
                                    args: { page: 1, limit: 10, customerId: "60f8b4b8e0b2a3a4b8b4b8b4" }
                                }
                            }
                        }
                    }
                ],
                usage: {
                    note: "Puedes usar los endpoints REST directamente o a través del sistema MCP",
                    authentication: "Los endpoints de admin requieren autenticación JWT",
                    baseUrl: `${req.protocol}://${req.get('host')}`
                }
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Endpoint de salud para verificar el servicio
    public health = async (req: Request, res: Response) => {
        try {
            logger.info('Health check requested');

            return res.status(200).json({
                status: 'OK',
                service: 'MCP Service',
                timestamp: new Date().toISOString(),
                anthropic_configured: !!envs.ANTHROPIC_API_KEY
            });

        } catch (error) {
            this.handleError(error, res);
        }
    };

    // Endpoint para obtener modelos disponibles desde Anthropic
    public listModels = async (req: Request, res: Response) => {
        try {
            logger.info('List models requested - querying Anthropic API');

            // Verificar que existe la API key
            if (!envs.ANTHROPIC_API_KEY) {
                throw CustomError.internalServerError('Anthropic API key not configured');
            }

            // Configurar headers para Anthropic
            const headers = {
                'Content-Type': 'application/json',
                'x-api-key': envs.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
            };

            logger.info('Making request to Anthropic API for models list');

            // Realizar la petición a la API de Anthropic para obtener modelos
            const response = await axios.get(
                'https://api.anthropic.com/v1/models',
                {
                    headers,
                    timeout: 30000 // 30 segundos timeout
                }
            );

            logger.info('Anthropic models API request successful');

            // Devolver la respuesta de Anthropic con información adicional
            return res.status(200).json({
                status: 'OK',
                service: 'MCP Service - Anthropic Models',
                timestamp: new Date().toISOString(),
                source: 'Anthropic API',
                ...response.data
            });

        } catch (error) {
            // Manejo específico de errores de Axios/Anthropic
            if (axios.isAxiosError(error)) {
                const status = error.response?.status || 500;
                const message = error.response?.data?.error?.message || 'Error communicating with Anthropic API';

                logger.error(`Anthropic models API error (${status}):`, message);

                return res.status(status).json({
                    error: message,
                    details: error.response?.data,
                    fallback_models: this.VALID_CLAUDE_MODELS // Fallback a lista local
                });
            }

            this.handleError(error, res);
        }
    };
}