// src/seeders/delivery-methods.seeder.ts

import mongoose from 'mongoose';
import { DeliveryMethodModel } from '../data/mongodb/models/delivery-method.model';

export const seedDeliveryMethods = async () => {
    console.log('üöÄ Starting delivery methods seeding...');
    console.log('üîç Using database:', mongoose.connection.name);
    console.log('üîç Connection state:', mongoose.connection.readyState);

    try {
        // Verificar conexi√≥n antes de proceder
        if (mongoose.connection.readyState !== 1) {
            throw new Error('MongoDB no est√° conectado');
        }

        // Verificar cu√°ntos documentos existen antes de limpiar
        const countBefore = await DeliveryMethodModel.countDocuments();
        console.log(`üìä Documents before cleanup: ${countBefore}`);

        // Limpiar la colecci√≥n primero
        const deleteResult = await DeliveryMethodModel.deleteMany({});
        console.log('üßπ Cleared existing delivery methods:', deleteResult);

        const methods = [
            {
                code: 'PICKUP',
                name: 'Retiro en Local',
                description: 'Ac√©rcate a nuestra tienda a retirar tu pedido.',
                requiresAddress: false,
                isActive: true,
            },
            {
                code: 'DELIVERY',
                name: 'Entrega a Domicilio',
                description: 'Recibe tu pedido en la puerta de tu casa.',
                requiresAddress: true,
                isActive: true,
            },
            {
                code: 'EXPRESS',
                name: 'Entrega Express',
                description: 'Entrega el mismo d√≠a (servicio premium).',
                requiresAddress: true,
                isActive: true,
            },
        ];

        // Insertar los nuevos m√©todos usando upsert para evitar duplicados
        const createdMethods = [];
        for (const method of methods) {
            try {
                // Usar findOneAndUpdate con upsert para evitar duplicados
                const created = await DeliveryMethodModel.findOneAndUpdate(
                    { code: method.code }, // Buscar por c√≥digo
                    method, // Datos a actualizar/insertar
                    {
                        upsert: true, // Crear si no existe
                        new: true, // Retornar el documento actualizado
                        runValidators: true // Ejecutar validaciones
                    }
                );
                createdMethods.push(created);
                console.log(`‚úÖ Upserted delivery method: ${method.name} (${method.code}) - ID: ${created._id}`);
            } catch (error) {
                console.error(`‚ùå Error upserting method ${method.code}:`, error);
                throw error;
            }
        }

        // Verificar que se insertaron correctamente
        const countAfter = await DeliveryMethodModel.countDocuments();
        console.log(`üìä Documents after seeding: ${countAfter}`);

        // Verificar con find
        const allMethods = await DeliveryMethodModel.find({});
        console.log('üìã All delivery methods in database:', allMethods.map(m => ({ id: m._id, code: m.code, name: m.name })));

        console.log('‚úÖ Delivery methods seeded successfully.');

    } catch (error) {
        console.error('‚ùå Error seeding delivery methods:', error);
        throw error;
    }
};
